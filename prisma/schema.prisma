// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model User {
    id             String    @id @default(auto()) @map("_id") @db.ObjectId
    name           String?
    email          String?   @unique
    emailVerified  DateTime?
    image          String?
    provider       String?
    hashedPassword String?
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt

    accounts Account[]
    requests Request[]
    Profile  Profile?
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Profile {
    id          String  @id @default(auto()) @map("_id") @db.ObjectId
    name        String?
    ethnicity   String?
    gender      String?
    birthday    String?
    phonenumber String?
    image       String?
    address     String?

    // Define the 1-to-1 relationship with User using email as the reference
    userEmail String @unique @map("userEmail")
    user      User   @relation(fields: [userEmail], references: [email])

    // 1-to-1 relationship with Location
    location Location?
}

model Location {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    lng       Float
    lat       Float
    address   Address?
    profile   Profile  @relation(fields: [profileId], references: [id])
    profileId String   @unique @db.ObjectId
}

model Address {
    id              String   @id @default(auto()) @map("_id") @db.ObjectId
    fullAddress     String
    pointOfInterest String
    city            String
    country         String
    location        Location @relation(fields: [locationId], references: [id])
    locationId      String   @unique @db.ObjectId
}

model Request {
    id             String   @id @default(auto()) @map("_id") @db.ObjectId
    taskname       String
    category       String
    datetime       DateTime
    description    String
    requesterName  String
    requesterImage String
    requesterCity  String
    compNeeded     Int
    status         String // "Waiting, Pending, OnGoing, Cancelled, Completed"

    user      User   @relation(fields: [userEmail], references: [email])
    userEmail String

    // Define the relation to the Applications model
    applications Application[]
}

model Application {
    id            String @id @default(auto()) @map("_id") @db.ObjectId
    amount        Float
    description   String
    userEmail     String
    compName      String
    compImage     String
    compCity      String
    compEthnicity String
    compGender    String
    compBirthday  String
    status        String // "Pending, Cancelled, Accepted"

    // Define the relation to the Request model
    request   Request @relation(fields: [requestId], references: [id])
    requestId String  @db.ObjectId
}
